// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace InsightsFrameworkTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Multiline Search Box")]
    [NUnit.Framework.CategoryAttribute("multiline_input_control")]
    public partial class MultilineSearchBoxFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MultilineSearchBox.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Multiline Search Box", "In order to be able to search for multiple items \nAs a PAA user\nI should be able " +
                    "to enter multiple input in Filter/Focus/Time controls for Huge and Non Huge Dime" +
                    "nsions", ProgrammingLanguage.CSharp, new string[] {
                        "multiline_input_control"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for Huge Dimensions on Filter Control accepts multiline input")]
        [NUnit.Framework.CategoryAttribute("filter_control")]
        public virtual void SearchForHugeDimensionsOnFilterControlAcceptsMultilineInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for Huge Dimensions on Filter Control accepts multiline input", new string[] {
                        "filter_control"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I select a huge dimension for filtering", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
   testRunner.And("I have entered \"multiline input\" into the Search bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
  testRunner.Then("I should see the \"multiline input\" items in the Search bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for Huge Dimensions on Focus Control accepts multiline input")]
        [NUnit.Framework.CategoryAttribute("focus_control")]
        public virtual void SearchForHugeDimensionsOnFocusControlAcceptsMultilineInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for Huge Dimensions on Focus Control accepts multiline input", new string[] {
                        "focus_control"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I select a huge dimension for focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
   testRunner.And("I have entered \"multiline input\" into the Search bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
  testRunner.Then("I should see the \"multiline input\" items in the Search bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for Huge Dimensions on Single Time Control accepts multiline input")]
        [NUnit.Framework.CategoryAttribute("single_time_control")]
        public virtual void SearchForHugeDimensionsOnSingleTimeControlAcceptsMultilineInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for Huge Dimensions on Single Time Control accepts multiline input", new string[] {
                        "single_time_control"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I select a huge dimension for single-time filtering", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
   testRunner.And("I have entered \"multiline input\" into the Search bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
  testRunner.Then("I should see the \"multiline input\" items in the Search bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for Non-Huge Dimensions on Filter Control accepts multiline input")]
        [NUnit.Framework.CategoryAttribute("filter_control")]
        public virtual void SearchForNon_HugeDimensionsOnFilterControlAcceptsMultilineInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for Non-Huge Dimensions on Filter Control accepts multiline input", new string[] {
                        "filter_control"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I select a non huge dimension for filtering", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
   testRunner.And("I have entered \"multiline input\" into the Search bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
  testRunner.Then("I should see the \"multiline input\" items in the Search bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for Non-Huge Dimensions on Focus Control accepts multiline input")]
        [NUnit.Framework.CategoryAttribute("focus_control")]
        public virtual void SearchForNon_HugeDimensionsOnFocusControlAcceptsMultilineInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for Non-Huge Dimensions on Focus Control accepts multiline input", new string[] {
                        "focus_control"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I select a non huge dimension for focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
   testRunner.And("I have entered \"multiline input\" into the Search bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
  testRunner.Then("I should see the \"multiline input\" items in the Search bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clear button available for Non-Huge Dimensions on Filter Control")]
        public virtual void ClearButtonAvailableForNon_HugeDimensionsOnFilterControl()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clear button available for Non-Huge Dimensions on Filter Control", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I search for \"multiline input\" in a non huge dimension for filtering", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
  testRunner.When("I clear the search box using the clear button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
  testRunner.Then("The search box is cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
   testRunner.And("The entire dataset is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clear button available for Huge Dimensions on Filter Control")]
        public virtual void ClearButtonAvailableForHugeDimensionsOnFilterControl()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clear button available for Huge Dimensions on Filter Control", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I search for \"multiline input\" in a huge dimension for filtering", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
  testRunner.When("I clear the search box using the clear button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
  testRunner.Then("The search box is cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
   testRunner.And("The entire dataset is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiline input uses Ctrl+Enter for new line in Huge/Non Huge Dimensions")]
        public virtual void MultilineInputUsesCtrlEnterForNewLineInHugeNonHugeDimensions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiline input uses Ctrl+Enter for new line in Huge/Non Huge Dimensions", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I search for \"single line of input\" in huge dimension for filtering", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
  testRunner.When("I key in \"Ctrl+Enter\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
  testRunner.Then("I should be able to enter data in a newline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pressing Enter key when focus is on Search Box causes manual search to be trigger" +
            "ed for Huge Dimensions")]
        public virtual void PressingEnterKeyWhenFocusIsOnSearchBoxCausesManualSearchToBeTriggeredForHugeDimensions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pressing Enter key when focus is on Search Box causes manual search to be trigger" +
                    "ed for Huge Dimensions", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given("I search for \"multiline input\" in huge dimension for filtering", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
  testRunner.When("I key in \"Enter\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
  testRunner.Then("Nothing happens?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Entering <maximum number of lines allowed> does not crash the control")]
        [NUnit.Framework.CategoryAttribute("manual")]
        public virtual void EnteringMaximumNumberOfLinesAllowedDoesNotCrashTheControl()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entering <maximum number of lines allowed> does not crash the control", new string[] {
                        "manual"});
#line 60
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
