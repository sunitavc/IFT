// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace InsightsFrameworkTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Soft Delete Analysis")]
    public partial class SoftDeleteAnalysisFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SoftDeleteAnalysis.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Soft Delete Analysis", "In order to phase out analyses that are unused\r\nAs a Solutions Developer\r\nI want " +
                    "to be able to delete analyses with the option of restoring it even after I upgra" +
                    "de to a later version of IF.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line 7
 testRunner.Given("a developer \"John The IF user\" with a dataset \"Umbrella Corp\" with profile \"Devel" +
                    "opment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Developer looks for the page pointing to the deleted page definition in Insights " +
            "Framework")]
        [NUnit.Framework.CategoryAttribute("landing_page")]
        public virtual void DeveloperLooksForThePagePointingToTheDeletedPageDefinitionInInsightsFramework()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Developer looks for the page pointing to the deleted page definition in Insights " +
                    "Framework", new string[] {
                        "landing_page"});
#line 10
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 11
  testRunner.When("I navigate to \"Analytics->Showcase->Pages->Decommissioned Landing Page\" Landing P" +
                    "age", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
  testRunner.Then("I should not see the \"Orphan\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("John the IF User looks for the soft deleted Landing page in Publisher Definitions" +
            "")]
        [NUnit.Framework.CategoryAttribute("landing_page_definitions")]
        public virtual void JohnTheIFUserLooksForTheSoftDeletedLandingPageInPublisherDefinitions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("John the IF User looks for the soft deleted Landing page in Publisher Definitions" +
                    "", new string[] {
                        "landing_page_definitions"});
#line 15
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 16
   testRunner.When("I visit the Landing page \"Definitions\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
    testRunner.And("I enable \"Show Deleted Items\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
   testRunner.Then("I should see the \"ToBeDeleted\" landing page with a strikethrough", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("John the IF User interacts with the soft deleted Landing page in Publisher Defini" +
            "tions")]
        [NUnit.Framework.CategoryAttribute("landing_page_definitions")]
        public virtual void JohnTheIFUserInteractsWithTheSoftDeletedLandingPageInPublisherDefinitions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("John the IF User interacts with the soft deleted Landing page in Publisher Defini" +
                    "tions", new string[] {
                        "landing_page_definitions"});
#line 21
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 22
  testRunner.When("I visit the Landing page \"Definitions\" and I enable \"Show Deleted Items\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
    testRunner.And("I hover over the \"ToBeDeleted\" landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
   testRunner.Then("I should see the option \"Undelete\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("John the IF User looks for the soft deleted Landing page in Publisher Landing Pag" +
            "e Builder")]
        [NUnit.Framework.CategoryAttribute("landing_page_builder")]
        public virtual void JohnTheIFUserLooksForTheSoftDeletedLandingPageInPublisherLandingPageBuilder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("John the IF User looks for the soft deleted Landing page in Publisher Landing Pag" +
                    "e Builder", new string[] {
                        "landing_page_builder"});
#line 27
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 28
  testRunner.When("I visit the Landing page builder for the \"Decommssioned\" section of the \"Playgrou" +
                    "nd\" landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
   testRunner.Then("I should see the \"ToBeDeleted\" landing page with a strikethrough", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
    testRunner.And("The state of the \"ToBeDeleted\" page should be \"On\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("John the IF User interacts with the soft deleted Landing page in Publisher Landin" +
            "g Page Builder")]
        [NUnit.Framework.CategoryAttribute("landing_page_builder")]
        public virtual void JohnTheIFUserInteractsWithTheSoftDeletedLandingPageInPublisherLandingPageBuilder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("John the IF User interacts with the soft deleted Landing page in Publisher Landin" +
                    "g Page Builder", new string[] {
                        "landing_page_builder"});
#line 33
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 34
  testRunner.When("I visit the Landing page builder for the \"Decommssioned\" section of the \"Playgrou" +
                    "nd\" landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
    testRunner.And("I hover over the \"ToBeDeleted\" landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
   testRunner.Then("I should see a tooltip with the message \"The page definition linked to this page " +
                    "has been decommissioned.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("John the IF User selects the soft deleted Landing page in Publisher Landing Page " +
            "Builder")]
        [NUnit.Framework.CategoryAttribute("landing_page_builder")]
        public virtual void JohnTheIFUserSelectsTheSoftDeletedLandingPageInPublisherLandingPageBuilder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("John the IF User selects the soft deleted Landing page in Publisher Landing Page " +
                    "Builder", new string[] {
                        "landing_page_builder"});
#line 39
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 40
  testRunner.When("I visit the Landing page builder for the \"Decommssioned\" section of the \"Playgrou" +
                    "nd\" landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
    testRunner.And("I select the \"ToBeDeleted\" landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
   testRunner.Then("the \"ToBeDeleted\" page definition in the page detail dropdown is prefixed with \"D" +
                    "ecommissioned\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("John the IF User looks for the soft deleted Landing page in Publisher Landing Pag" +
            "e Configurator")]
        [NUnit.Framework.CategoryAttribute("landing_page_configurator")]
        public virtual void JohnTheIFUserLooksForTheSoftDeletedLandingPageInPublisherLandingPageConfigurator()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("John the IF User looks for the soft deleted Landing page in Publisher Landing Pag" +
                    "e Configurator", new string[] {
                        "landing_page_configurator"});
#line 45
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 46
  testRunner.When("I visit the Landing page configurator for the \"Playground\" landing page with \"Umb" +
                    "rella\" Dataset and \"Developer\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
   testRunner.Then("I should see the \"ToBeDeleted\" landing page with a strikethrough", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
    testRunner.And("The state of the \"ToBeDeleted\" page should be \"On\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("John the IF User opens and edits the page pointing to the deleted page definition" +
            " in the stale Story Board")]
        [NUnit.Framework.CategoryAttribute("story_board,")]
        [NUnit.Framework.CategoryAttribute("usage_analytics")]
        public virtual void JohnTheIFUserOpensAndEditsThePagePointingToTheDeletedPageDefinitionInTheStaleStoryBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("John the IF User opens and edits the page pointing to the deleted page definition" +
                    " in the stale Story Board", new string[] {
                        "story_board,",
                        "usage_analytics"});
#line 51
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 52
  testRunner.When("I open and edit the \"Stale\" analysis in the \"Decommissioned\" folder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
   testRunner.Then("I should see an ok alert titled \"Discontinued analysis\" with the message \"This an" +
                    "alysis has been discontinued and cannot be edited.  Contact support for more inf" +
                    "ormation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
    testRunner.And("\"OpenAndEditDecommissionedAnalysis\" event is raised in Usage Analytics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("John the IF User refreshes the page pointing to the deleted page definition in th" +
            "e stale Story Board")]
        [NUnit.Framework.CategoryAttribute("story_board,")]
        [NUnit.Framework.CategoryAttribute("usage_analytics")]
        public virtual void JohnTheIFUserRefreshesThePagePointingToTheDeletedPageDefinitionInTheStaleStoryBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("John the IF User refreshes the page pointing to the deleted page definition in th" +
                    "e stale Story Board", new string[] {
                        "story_board,",
                        "usage_analytics"});
#line 57
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 58
  testRunner.When("I refresh the \"Orphan\" page of the \"Stale\" analysis in the \"Decommissioned\" folde" +
                    "r", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
   testRunner.Then("I should see an ok alert titled \"Discontinued analysis\" with the message \"This an" +
                    "alysis has been discontinued and cannot be refreshed.  Contact support for more " +
                    "information\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 60
    testRunner.And("The storyboard is marked out of sync with a decommissioned watermark on the thumb" +
                    "nail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
    testRunner.And("\"RefreshDecommissionedAnalysis\" event is raised in Usage Analytics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("John the IF User refreshes all pages in the stale Story Board")]
        [NUnit.Framework.CategoryAttribute("story_board")]
        public virtual void JohnTheIFUserRefreshesAllPagesInTheStaleStoryBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("John the IF User refreshes all pages in the stale Story Board", new string[] {
                        "story_board"});
#line 64
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 65
  testRunner.When("I refresh the \"Stale\" analysis in the \"Decommissioned\" folder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
   testRunner.Then("I should see an Yes/No alert titled \"Discontinued analysis\" with the message \"Fol" +
                    "lowing analysis are decommissioned. Would you like to continue refreshing the re" +
                    "maining analysis...\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
    testRunner.And("The storyboard is marked out of sync with a decommissioned watermark on the thumb" +
                    "nail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("John the IF User slideviews the stale Story Board")]
        [NUnit.Framework.CategoryAttribute("story_board")]
        public virtual void JohnTheIFUserSlideviewsTheStaleStoryBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("John the IF User slideviews the stale Story Board", new string[] {
                        "story_board"});
#line 70
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 71
  testRunner.When("I slideview the \"Stale\" analysis in the \"Decommissioned\" folder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
   testRunner.Then("I should see the storyboard slideview with no decommissioned watermark", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Migration tool scenarios need to be fleshed out.")]
        [NUnit.Framework.CategoryAttribute("migration_tool")]
        public virtual void MigrationToolScenariosNeedToBeFleshedOut_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Migration tool scenarios need to be fleshed out.", new string[] {
                        "migration_tool"});
#line 75
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
